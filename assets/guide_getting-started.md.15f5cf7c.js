import{_ as s,c as a,o as t,d as e}from"./app.ee1ebac9.js";const f=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"What next?","slug":"what-next","link":"#what-next","children":[]}],"relativePath":"guide/getting-started.md","lastUpdated":1667491179000}'),n={name:"guide/getting-started.md"},o=e(`<h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><p>This section will get you up and running with <a href="https://learn.microsoft.com/en-us/dax/" target="_blank" rel="noreferrer">DAX</a> functions in your TypeScript project in no time at all!</p><div class="info custom-block"><p class="custom-block-title">HEADS UP</p><p>ts-dax is not affiliated with nor endorsed by Microsoft in any way. This library is open-source, shared using a permissive license, and community maintained!</p></div><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><p>Add ts-dax to your TypeScript project as a dependency:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">$ pnpm add -E ts-dax</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We&#39;re using PNPM here for demonstrative purposes (we also use it internally for ts-dax), but you can use whatever tickles your fancy!</p></div><p>You can now start importing DAX functions within your project!</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">datesYTD</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ts-dax</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;">// const { datesYTD } = require(&#39;ts-dax&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ytd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">datesYTD</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#676E95;">// =&gt; Set&lt;Date&gt; containing dates from start of month to today</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ts-dax is <a href="https://bundlephobia.com/package/ts-dax" target="_blank" rel="noreferrer">side-effect free and tree-shakeable</a>, so all of the implemented functions are exported from the same path.</p><p>No need to remember if <code>datesYTD()</code> is found in <code>&#39;ts-dax&#39;</code>, <code>&#39;ts-dax/calendar&#39;</code>, or <code>&#39;ts-dax/dates&#39;</code>!</p></div><h2 id="what-next" tabindex="-1">What next? <a class="header-anchor" href="#what-next" aria-hidden="true">#</a></h2><p>Now that you have a TypeScript project with ts-dax installed, it&#39;s time to dive into the API reference and discover what DAX functions are at your disposal!</p><p>Take a look at the sidebar on the left for the different function categories available with ts-dax!</p>`,13),l=[o];function p(i,r,c,d,h,u){return t(),a("div",null,l)}const D=s(n,[["render",p]]);export{f as __pageData,D as default};
